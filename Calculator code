package calculator;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class Calculator extends JFrame {

    private JTextField displayField;
    private JButton[] buttons;
    private String[] buttonLabels = {
            "7", "8", "9", "/",
            "4", "5", "6", "*",
            "1", "2", "3", "-",
            "0", ".", "=", "+",
            "sin", "cos", "tan",
            "log", "sqrt", "Clear", "About"
    };
    private String currentInput = "";

    public Calculator() {
        setTitle("Enhanced Calculator");

        JPanel mainPanel = new JPanel(new BorderLayout(10, 10));
        mainPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
        setContentPane(mainPanel);

        displayField = new JTextField();
        displayField.setHorizontalAlignment(JTextField.RIGHT);
        displayField.setFont(new Font("Arial", Font.PLAIN, 20));
        displayField.setEditable(false);
        mainPanel.add(displayField, BorderLayout.NORTH);

        JPanel buttonPanel = new JPanel(new GridLayout(5, 4, 10, 10));
        buttons = new JButton[buttonLabels.length];

        for (int i = 0; i < buttonLabels.length; i++) {
            buttons[i] = new JButton(buttonLabels[i]);
            buttons[i].setFont(new Font("Arial", Font.PLAIN, 18));
            buttons[i].addActionListener(new ButtonClickListener());
            buttonPanel.add(buttons[i]);
        }

        mainPanel.add(buttonPanel, BorderLayout.CENTER);

        pack();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);
        setResizable(false);
    }

    private class ButtonClickListener implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            String command = e.getActionCommand();

            switch (command) {
                case "=":
                    try {
                        currentInput = String.valueOf(eval(currentInput));
                    } catch (Exception ex) {
                        currentInput = "Error";
                    }
                    break;
                case "Clear":
                    currentInput = "";
                    break;
                case "sqrt":
                    try {
                        currentInput = String.valueOf(Math.sqrt(Double.parseDouble(currentInput)));
                    } catch (Exception ex) {
                        currentInput = "Error";
                    }
                    break;
                case "sin":
                    try {
                        currentInput = String.valueOf(Math.sin(Math.toRadians(Double.parseDouble(currentInput))));
                    } catch (Exception ex) {
                        currentInput = "Error";
                    }
                    break;
                case "cos":
                    try {
                        currentInput = String.valueOf(Math.cos(Math.toRadians(Double.parseDouble(currentInput))));
                    } catch (Exception ex) {
                        currentInput = "Error";
                    }
                    break;
                case "tan":
                    try {
                        currentInput = String.valueOf(Math.tan(Math.toRadians(Double.parseDouble(currentInput))));
                    } catch (Exception ex) {
                        currentInput = "Error";
                    }
                    break;
                case "log":
                    try {
                        currentInput = String.valueOf(Math.log(Double.parseDouble(currentInput)));
                    } catch (Exception ex) {
                        currentInput = "Error";
                    }
                    break;
                case "About":
                    showAboutDialog();
                    return;
                default:
                    currentInput += command;
            }

            displayField.setText(currentInput);
        }
    }

    private double eval(String expression) {
        return new Object() {
            int pos = -1, ch;

            void nextChar() {
                ch = (++pos < expression.length()) ? expression.charAt(pos) : -1;
            }

            boolean eat(int charToEat) {
                while (ch == ' ') nextChar();
                if (ch == charToEat) {
                    nextChar();
                    return true;
                }
                return false;
            }

            double parse() {
                nextChar();
                double x = parseExpression();
                if (pos < expression.length()) throw new RuntimeException("Unexpected: " + (char) ch);
                return x;
            }

            double parseExpression() {
                double x = parseTerm();
                for (;;) {
                    if (eat('+')) x += parseTerm();
                    else if (eat('-')) x -= parseTerm();
                    else return x;
                }
            }

            double parseTerm() {
                double x = parseFactor();
                for (;;) {
                    if (eat('*')) x *= parseFactor();
                    else if (eat('/')) x /= parseFactor();
                    else return x;
                }
            }

            double parseFactor() {
                if (eat('+')) return parseFactor();
                if (eat('-')) return -parseFactor();

                double x;
                int startPos = this.pos;
                if (eat('(')) {
                    x = parseExpression();
                    eat(')');
                } else if ((ch >= '0' && ch <= '9') || ch == '.') {
                    while ((ch >= '0' && ch <= '9') || ch == '.') nextChar();
                    x = Double.parseDouble(expression.substring(startPos, this.pos));
                } else if (ch >= 'a' && ch <= 'z') {
                    while (ch >= 'a' && ch <= 'z') nextChar();
                    String func = expression.substring(startPos, this.pos);
                    x = parseFactor();
                    switch (func) {
                        case "sin":
                            x = Math.sin(Math.toRadians(x));
                            break;
                        case "cos":
                            x = Math.cos(Math.toRadians(x));
                            break;
                        case "tan":
                            x = Math.tan(Math.toRadians(x));
                            break;
                        case "log":
                            x = Math.log(x);
                            break;
                        case "sqrt":
                            x = Math.sqrt(x);
                            break;
                        default:
                            throw new RuntimeException("Unknown function: " + func);
                    }
                } else {
                    throw new RuntimeException("Unexpected: " + (char) ch);
                }

                if (eat('^')) x = Math.pow(x, parseFactor());

                return x;
            }
        }.parse();
    }

    private void showAboutDialog() {
        JOptionPane.showMessageDialog(this,
                "Developer: Sana Shaikh\n" +
                        "This calculator was developed by Sana Shaikh as a programming exercise.",
                "About Developer", JOptionPane.INFORMATION_MESSAGE);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            Calculator calculator = new Calculator();
            calculator.setVisible(true);
        });
    }
}
